import java.io.*;
import java.util.*;

public class Admin extends User{
    private String adminName;
    private Food foodMenu;
    private Beverages beverageMenu;
    Scanner input = new Scanner(System.in);

    public Admin(int userID, String password, String adminName,Food foodMenu, Beverages beverageMenu){
        super(userID, password);
        this.adminName = adminName;
        this.foodMenu = foodMenu;
        this.beverageMenu = beverageMenu;
    }

    public String getAdminName(){
        return adminName;
    }

    public boolean adminLogin(){
        final int adminID = 123;
        final String adminPass = "admin";

        if (userID == adminID && password.equals(adminPass)){
            return true;
        }
        else{
            return false;
        }
    }

    public void disSales() {
        if (Payment.getTotalSales() == 0){
            System.out.println("+=========== SALES REPORT ===========+");
            System.out.println("|      NO SALES HAS BEEN MADE YET    |");  
            System.out.println("+====================================+");
        }else{
            System.out.println("\n+=========== SALES REPORT ===========+");
            System.out.printf("| Total Sales:    RM%-16.2f |\n", Payment.getTotalSales());
            System.out.printf("| Highest Sale:   RM%-16.2f |\n", Payment.getHighestSale());
            System.out.printf("| Lowest Sale:    RM%-16.2f |\n", Payment.getLowestSale());
            System.out.println("+====================================+");
        }
    }

    public void disItemSold(Order order) {
        System.out.println("\n+===========================================+");
        System.out.println("|              ITEMS SOLD REPORT            |");
        System.out.println("+-----------------------------+-------------+");
        System.out.printf("| %-27s | %-11s |\n", "Item", "Quantity");
        System.out.println("+-----------------------------+-------------+");
        System.out.printf("| %-27s | x%-10d |\n", "Burger Ayam", order.getPurchasedA());
        System.out.printf("| %-27s | x%-10d |\n", "Burger Daging", order.getPurchasedD());
        System.out.printf("| %-27s | x%-10d |\n", "Spaghetti Carbonara", order.getPurchasedC());
        System.out.printf("| %-27s | x%-10d |\n", "Watermelon Juice", order.getPurchasedWJ());
        System.out.printf("| %-27s | x%-10d |\n", "Honeydew Juice", order.getPurchasedHJ());
        System.out.println("+-----------------------------+-------------+");
    }

    public void updateMenu() {
        String choice;
        do {
            System.out.println(foodMenu.getFoodList());
            System.out.println(beverageMenu.getBeveList());
            System.out.println("What would you like to do?");
            System.out.println("+===============================+");
            System.out.println("|   [1] Update Items Price      |");
            System.out.println("|-------------------------------|");
            System.out.println("|   [2] Change Item Status      |");
            System.out.println("|-------------------------------|");
            System.out.println("|   [B] Back                    |");
            System.out.println("+===============================+");
            System.out.print("Choose option [1/2/B]: ");
            choice = input.nextLine();

            if (choice.equals("1")) {
                System.out.print("Enter item code: ");
                String code = input.nextLine();

                try {
                    System.out.print("Enter new price: RM");
                    double nPrice = input.nextDouble();
                    input.nextLine();

                    switch (code.toUpperCase()) {
                        case "A": foodMenu.setAp(nPrice); break;
                        case "D": foodMenu.setDp(nPrice); break;
                        case "C": foodMenu.setCp(nPrice); break;
                        case "WJ": beverageMenu.setWJp(nPrice); break;
                        case "HJ": beverageMenu.setHJp(nPrice); break;
                        default:
                            System.out.println("Invalid code. Please enter a valid menu item code.");
                            continue;
                    }

                    System.out.println("Price Updated Successfully!");

                } catch (InputMismatchException e) {
                    System.out.println("Invalid price input. Please enter a valid number.");
                    input.nextLine();
                }

            } else if (choice.equals("2")) {
                System.out.print("Enter item code to toggle status: ");
                String code = input.nextLine().toUpperCase();

                switch (code) {
                        // Food
                    case "A":
                        foodMenu.setApCheck(!foodMenu.isApCheck()); break;
                    case "D":
                        foodMenu.setDpCheck(!foodMenu.isDpCheck()); break;
                    case "C":
                        foodMenu.setCpCheck(!foodMenu.isCpCheck()); break;

                        // Beverages
                    case "WJ":
                        beverageMenu.setWJpcheck(!beverageMenu.isWJpcheck()); break;
                    case "HJ":
                        beverageMenu.setHJpcheck(!beverageMenu.isHJpcheck()); break;

                    default:
                        System.out.println("Invalid code. Please enter a valid menu item code.");
                        continue;
                }

                System.out.println("Item availability status updated successfully!");

            } else if (!choice.equalsIgnoreCase("B")) {
                System.out.println("Invalid input. Please try again.");
            }

        } while (!choice.equalsIgnoreCase("B"));
    }

    public static void disTotalCustomer(){
        try {
            BufferedReader br = new BufferedReader(new FileReader("Customer.txt"));
            String line;

            boolean hasData = false;

            System.out.println("+=================================================+");
            System.out.println("|  User ID   |     Customer Name    |   Type      |");
            System.out.println("+------------+----------------------+-------------+");

            while ((line = br.readLine()) != null) {
                hasData = true;
                StringTokenizer st = new StringTokenizer(line, ",");
                int userID = Integer.parseInt(st.nextToken());
                st.nextToken();
                String name = st.nextToken();
                boolean isMember = Boolean.parseBoolean(st.nextToken());

                String type = isMember ? "Member" : "Regular";
                System.out.printf("| %-10d | %-20s | %-11s |\n", userID, name, type);
            }

            if (!hasData){
                System.out.println("|         No customer found in the system.        |");
            }

            System.out.println("+=================================================+");
            br.close();
        } catch (IOException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }
}
