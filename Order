import java.util.Scanner;

public class Order {
    private Food foodMenu;
    private Beverages beverageMenu;
    private String[] name;
    private double[] qty;
    private double[] prices;
    private int x = 0;
    private Scanner input = new Scanner(System.in);

    public Order(Food foodMenu, Beverages beverageMenu) {
        this.foodMenu = foodMenu;
        this.beverageMenu = beverageMenu;
        this.name = new String[100];
        this.qty = new double[100];
        this.prices = new double[100];
    }
   

    public void placeOrder() {
        boolean continueOrdering = true;

        while (continueOrdering) {
            // Display unified menu
            System.out.println("\n================= üí©FULL MENU =================");
            System.out.println(foodMenu.getFoodList());
            System.out.println(beverageMenu.getBeveList());
            System.out.println("Enter item code (A/D/C/WJ/HJ) or 0 to finish ordering:");
            System.out.print("Your choice: ");
            String code = input.nextLine().toUpperCase();

            switch (code) {
                    // Food
                case "A":
                    if (foodMenu.isApCheck()) {
                        addItem("Burger Ayam", foodMenu.getAp());
                    } else {
                        System.out.println("‚ùå Sorry, Burger Ayam is currently out of order.");
                    }
                    break;

                case "D":
                    if (foodMenu.isDpCheck()) {
                        addItem("Burger Daging", foodMenu.getDp());
                    } else {
                        System.out.println("‚ùå Sorry, Burger Daging is currently out of order.");
                    }
                    break;

                case "C":
                    if (foodMenu.isCpCheck()) {
                        addItem("Spaghetti Carbonara", foodMenu.getCp());
                    } else {
                        System.out.println("‚ùå Sorry, Spaghetti Carbonara is currently out of order.");
                    }
                    break;

                    // Beverages
                case "WJ":
                    if (beverageMenu.isWJpcheck()) {
                        addItem("Watermelon Juice", beverageMenu.getWJp());
                    } else {
                        System.out.println("‚ùå Sorry, Watermelon Juice is currently out of order.");
                    }
                    break;

                case "HJ":
                    if (beverageMenu.isHJpcheck()) {
                        addItem("Honeydew Juice", beverageMenu.getHJp());
                    } else {
                        System.out.println("‚ùå Sorry, Honeydew Juice is currently out of order.");
                    }
                    break;

                case "0":
                    continueOrdering = false;
                    break;

                default:
                    System.out.println("‚ö†Ô∏è Invalid code. Please try again.");
            }
        }
    }

    private void addItem(String itemName, double itemPrice) {
        System.out.print("Enter quantity: ");
        double quantity = input.nextDouble();
        input.nextLine(); // Consume newline

        name[x] = itemName;
        qty[x] = quantity;
        prices[x] = itemPrice * quantity;
        x++;

        System.out.println("‚úÖ " + itemName + " x" + (int) quantity + " added to your order.");
    }
    
    public void clearOrder() {
        x = 0;
        for (int i = 0; i < name.length; i++) {
            name[i] = null;
            qty[i] = 0;
            prices[i] = 0;
        }
    }

    public void printOrderSummary() {
        System.out.println("\n========= ORDER SUMMARY =========");
        double total = 0;
        for (int i = 0; i < x; i++) {
            System.out.printf("%-25s x%.0f - RM%.2f\n", name[i], qty[i], prices[i]);
            total += prices[i];
        }
        System.out.printf("---------------------------------\nTOTAL: RM%.2f\n", total);
    }

    public String[] getNameArray() {return name;}

    public double[] getQtyArray() {return qty;}

    public int getOrderCount() {return x;}

    public double getTotalPrice() {
        double total = 0;
        for (int i = 0; i < x; i++) {
            total += prices[i];
        }
        return total;
    }

}
