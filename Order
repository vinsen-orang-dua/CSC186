import java.util.Scanner;

public class Order {
    protected double total;
    protected double tprice;
    private int quantity;
    private Food foodMenu;
    private Beverages beverageMenu;
    private String[] name;
    private double[] qty;
    private double[] prices;
    private int x = 0;
    private int purcasedA = 0;
    private int purcasedD = 0;
    private int purcasedC = 0;
    private int purcasedWJ = 0;
    private int purcasedHJ = 0;
    //Payment payment = new Payment(tprice, total);
    Scanner input = new Scanner(System.in);
    

    
        public int getPurcasedA() {
        return purcasedA;
    }

    public int getPurcasedD() {
        return purcasedD;
    }

    public int getPurcasedC() {
        return purcasedC;
    }

    public int getPurcasedWJ() {
        return purcasedWJ;
    }

    public int getPurcasedHJ() {
        return purcasedHJ;
    }


    public Order(Food foodMenu, Beverages beverageMenu) {
        this.foodMenu = foodMenu;
        this.beverageMenu = beverageMenu;
        this.name = new String[100];
        this.qty = new double[100];
        this.prices = new double[100];
    }
    public double[] getPrices(){
        return prices;
    }

        private void addItem(String itemName, double itemPrice) {

        name[x] = itemName;
        qty[x] = quantity;
        prices[x] = itemPrice * quantity;
        x++;

        System.out.println("✅ " + itemName + " x" + (int) quantity + " added to your order.");
    }
    
    public void placeOrder() {
        boolean continueOrdering = true;

        while (continueOrdering) {
            // Display unified menu
            System.out.println("\n================= FULL MENU =================");
            System.out.println(foodMenu.getFoodList());
            System.out.println(beverageMenu.getBeveList());
            System.out.println("Enter item code (A/D/C/WJ/HJ) or 0 to finish ordering:");
            System.out.print("Your choice: ");
            String code = input.nextLine().toUpperCase();
            

            switch (code) {
                    
                    
                case "A":
                    if (foodMenu.isApCheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Burger Ayam", foodMenu.getAp());
                        qty[x] = quantity;
                        purcasedA = purcasedA + quantity; 
                    } else {
                        System.out.println("❌ Sorry, Burger Ayam is currently out of order.");
                    }
                    break;

                case "D":
                    if (foodMenu.isDpCheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Burger Daging", foodMenu.getDp());
                        qty[x] = quantity;
                        purcasedD = purcasedD + quantity;
                    } else {
                        System.out.println("❌ Sorry, Burger Daging is currently out of order.");
                    }
                    break;

                case "C":
                    if (foodMenu.isCpCheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Spaghetti Carbonara", foodMenu.getCp());
                        qty[x] = quantity;
                        purcasedC = purcasedC + quantity;
                    } else {
                        System.out.println("❌ Sorry, Spaghetti Carbonara is currently out of order.");
                    }
                    break;

                    // Beverages
                case "WJ":
                    if (beverageMenu.isWJpcheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Watermelon Juice", beverageMenu.getWJp());
                        qty[x] = quantity;
                        purcasedWJ = purcasedWJ + quantity;
                    } else {
                        System.out.println("❌ Sorry, Watermelon Juice is currently out of order.");
                    }
                    break;

                case "HJ":
                    if (beverageMenu.isHJpcheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Honeydew Juice", beverageMenu.getHJp());
                        qty[x] = quantity;
                        purcasedHJ = purcasedHJ + quantity;
                    } else {
                        System.out.println("❌ Sorry, Honeydew Juice is currently out of order.");
                    }
                    break;

                case "0":
                    continueOrdering = false;
                    printOrderSummary();
                    Payment payment = new Payment(tprice, total);
                    payment.payMethod();
                    break;

                default:
                    System.out.println("⚠️ Invalid code. Please try again.");
            }
        }
    }
    
    public void clearOrder() {
        x = 0;
        for (int i = 0; i < name.length; i++) {
            name[i] = null;
            qty[i] = 0;
            prices[i] = 0;
        }
    }

    public void printOrderSummary() {
        System.out.println("\n========= ORDER SUMMARY =========");
        double total = 0;
        for (int i = 0; i < x; i++) {
            System.out.printf("%-25s x%.0f - RM%.2f\n", name[i], qty[i], prices[i]);
            total += prices[i];
        }

        boolean isMember = Customer.isMember(LoginSession.getCurrentUserID());

        if (isMember && total > 20.0) {
            double discount = total * 0.20;
            double discountedTotal = total - discount;
            System.out.printf("---------------------------------\n");
            System.out.printf("TOTAL:             RM%.2f\n", total);
            System.out.printf("MEMBER DISCOUNT:   RM%.2f\n", discount);
            System.out.printf("DISCOUNTED TOTAL:  RM%.2f\n", discountedTotal);
            this.total = discountedTotal;
            this.tprice = discountedTotal;
        } else {
            System.out.printf("---------------------------------\nTOTAL: RM%.2f\n", total);
            this.total = total;
            this.tprice = total;
        }
    }

    public double getTotalPrice() {
        double total = 0;
        for (int i = 0; i < x; i++) {
            total += prices[i];
        }
        this.tprice = total;
        return total;
    }

}
