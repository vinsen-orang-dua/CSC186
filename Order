import java.util.Scanner;

public class Order {
    protected double total;
    protected double tprice;
    protected double amt;
    int cardNum = 0;
    private int quantity;
    private Food foodMenu;
    private Beverages beverageMenu;
    private String[] name;
    private double[] qty;
    private double[] prices;
    private int x = 0;
    private int purchasedA = 0;
    private int purchasedD = 0;
    private int purchasedC = 0;
    private int purchasedWJ = 0;
    private int purchasedHJ = 0;
    Scanner input = new Scanner(System.in);

    public int getPurchasedA() { return purchasedA; }

    public int getPurchasedD() { return purchasedD; }

    public int getPurchasedC() { return purchasedC; }

    public int getPurchasedWJ() { return purchasedWJ; }

    public int getPurchasedHJ() { return purchasedHJ; }

    public Order(Food foodMenu, Beverages beverageMenu) {
        this.foodMenu = foodMenu;
        this.beverageMenu = beverageMenu;
        this.name = new String[100];
        this.qty = new double[100];
        this.prices = new double[100];
    }

    public double[] getPrices() {
        return prices;
    }

    private void addItem(String itemName, double itemPrice, int quantity) {
        name[x] = itemName;
        qty[x] = quantity;
        prices[x] = itemPrice * quantity;
        System.out.println("✅ " + itemName + " x" + quantity + " added to your order.");
        x++;
    }

    public void placeOrder(int userID) {
        boolean continueOrdering = true;

        while (continueOrdering) {
            System.out.println("\n================= FULL MENU =================");
            System.out.println(foodMenu.getFoodList());
            System.out.println(beverageMenu.getBeveList());
            System.out.println("[0] to proceed with order | [X] to cancel order");
            System.out.println("Enter item code (A/D/C/WJ/HJ):");
            System.out.print("Your choice: ");
            String code = input.nextLine().toUpperCase();

            switch (code) {
                case "A":
                    if (foodMenu.isApCheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Burger Ayam", foodMenu.getAp(), quantity);
                        purchasedA += quantity;
                    } else {
                        System.out.println("❌ Sorry, Burger Ayam is currently out of order.");
                    }
                    break;

                case "D":
                    if (foodMenu.isDpCheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Burger Daging", foodMenu.getDp(), quantity);
                        purchasedD += quantity;
                    } else {
                        System.out.println("❌ Sorry, Burger Daging is currently out of order.");
                    }
                    break;

                case "C":
                    if (foodMenu.isCpCheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Spaghetti Carbonara", foodMenu.getCp(), quantity);
                        purchasedC += quantity;
                    } else {
                        System.out.println("❌ Sorry, Spaghetti Carbonara is currently out of order.");
                    }
                    break;

                case "WJ":
                    if (beverageMenu.isWJpcheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Watermelon Juice", beverageMenu.getWJp(), quantity);
                        purchasedWJ += quantity;
                    } else {
                        System.out.println("❌ Sorry, Watermelon Juice is currently out of order.");
                    }
                    break;

                case "HJ":
                    if (beverageMenu.isHJpcheck()) {
                        System.out.print("Enter quantity: ");
                        quantity = input.nextInt();
                        input.nextLine();
                        addItem("Honeydew Juice", beverageMenu.getHJp(), quantity);
                        purchasedHJ += quantity;
                    } else {
                        System.out.println("❌ Sorry, Honeydew Juice is currently out of order.");
                    }
                    break;

                case "0":
                    if (x == 0) {
                        System.out.println("⚠️ No items ordered. Cannot proceed to payment.");
                        break;
                    }

                    continueOrdering = false;

                    OrderDetail orderDetail = new OrderDetail(name, qty, prices, x, userID);
                    double finalTotal = orderDetail.printSummaryAndGetTotal();

                    this.total = finalTotal;
                    this.tprice = finalTotal;

                   System.out.println("\nHow would you like to pay?");
        System.out.println("[1] Cash");
        System.out.println("[2] Card (10% discount)");
        
        boolean validOption = false;
        do{
            System.out.print("Choose option: ");
            int payOpt = input.nextInt();
            
            String result;
            double paymentAmount = tprice;

            switch (payOpt) {
                case 1 :
                    boolean paid = false;
                    do{
                        System.out.print("Enter amount: RM");
                        amt = input.nextDouble();
                        input.nextLine();
                        Cash cash = new Cash(tprice, total, amt);
                        result = cash.pay();
                        System.out.println(result);
                    
                        if(!result.equals("Money not enough to pay.")){
                            Payment.updateSaleStats(this.total);
                            paid = true;
                        }else{
                            System.out.println("Please enter a valid amount.");
                        }
                    }while(!paid);
                    validOption = true;
                    break;

                case 2: 
                
                    Card card = new Card(tprice, total, cardNum);
                    result = card.pay();
                    double discountedPrice = tprice * 0.9;
                    Payment.updateSaleStats(discountedPrice);
                    System.out.println(result);
                    validOption = true;
                    break;
               

                default: 
                    System.out.println("Invalid payment option selected.");
                    break;
            }
        }while(!validOption);

                    break;

                case "X":
                    clearOrder();
                    System.out.println("❌ Order cancelled. Returning to login menu");
                    purchasedA = 0;
                    purchasedD = 0;
                    purchasedC = 0;
                    purchasedWJ = 0;
                    purchasedHJ = 0;
                    return;

                default:
                    System.out.println("⚠️ Invalid code. Please try again.");
            }
        }
    }

    public void clearOrder() {
        x = 0;
        for (int i = 0; i < name.length; i++) {
            name[i] = null;
            qty[i] = 0;
            prices[i] = 0;
        }
    }

    public double getTotalPrice() {
        double total = 0;
        for (int i = 0; i < x; i++) {
            total += prices[i];
        }
        this.tprice = total;
        return total;
    }
}
